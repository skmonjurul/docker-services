# redis-conf/redis.conf
# This file contains a production-grade Redis configuration.

# --- General ---
# Run as a daemon (background process) - Set to 'no' for Docker containers
daemonize no

# Specify the PID file (less critical in Docker, but good practice)
pidfile /var/run/redis_6379.pid

# Accept connections on this port.
port 6379

# Bind the server to the specified IP addresses.
# 0.0.0.0 makes Redis listen on all available network interfaces.
# This is typically safe within a Docker container's isolated network.
bind 0.0.0.0

# Number of databases.
databases 16

# --- Logging ---
# Specify the log file name. Use "" to log to stdout/stderr for Docker logs.
logfile ""

# Set the logging level.
# debug (a lot of information, useful for development/debugging)
# verbose (many rarely useful info, but not high volume)
# notice (moderately verbose, suitable for production)
# warning (only important messages)
loglevel notice

# --- Persistence (RDB Snapshots) ---
# Save the dataset to disk (snapshotting).
# Save every 900 seconds (15 minutes) if at least 1 change has been made.
save 900 1
# Save every 300 seconds (5 minutes) if at least 10 changes have been made.
save 300 10
# Save every 60 seconds (1 minute) if at least 10000 changes have been made.
save 60 10000

# Stop writes if RDB background save fails.
stop-writes-on-bgsave-error yes

# Compress RDB files.
rdbcompression yes

# Verify RDB checksum.
rdbchecksum yes

# The filename where to dump the DB.
dbfilename dump.rdb

# The working directory. Must be writable by the Redis user.
# This matches the /data directory mounted by the Docker volume.
dir /data

# --- Persistence (AOF - Append Only File) ---
# Enable AOF persistence if you need higher durability (transactions logged).
# You can uncomment and set to 'yes' if RDB isn't enough for your RPO/RTO.
appendonly no
appendfilename "appendonly.aof"

# The fsync policy for AOF. 'everysec' is a good balance for most cases.
# appendfsync always (very durable, very slow)
# appendfsync everysec (good balance of durability and performance)
# appendfsync no (fast, but potentially more data loss)
appendfsync everysec

# Rewrite the AOF automatically if it grows too large.
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
no-appendfsync-on-rewrite no

# --- Memory Management (CRITICAL for Production) ---
# Set the maximum amount of memory Redis will use.
# !! IMPORTANT: Adjust this value based on your server's RAM and expected data size.
# If maxmemory is reached, Redis will evict keys according to the maxmemory-policy.
# Example: 512mb, 1gb, 2gb
# !! SET A REALISTIC VALUE !!
maxmemory 512mb

# Maxmemory policy: how Redis selects keys to evict when maxmemory is reached.
# noeviction: Return error when memory limit is reached.
# allkeys-lru: Evict least recently used keys among all keys.
# volatile-lru: Evict least recently used keys among keys with an expire set.
# allkeys-random: Evict random keys among all keys.
# volatile-random: Evict random keys among keys with an expire set.
# volatile-ttl: Evict keys with shortest TTL set.
# Default is often 'noeviction'. Choose based on your app's needs.
maxmemory-policy noeviction

# --- Client Limits ---
maxclients 10000

# --- Laziness (Redis 4.0+) ---
# Lazy freeing mechanism to minimize blocking operations.
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no

# --- Networking ---
# TCP keepalive. Recommended to set a non-zero value for stability.
tcp-keepalive 300

# --- Security (requirepass is handled in Docker Compose command) ---
# IMPORTANT: 'requirepass' should be set via environment variables or Docker secrets
# in a real production environment, not hardcoded in this file.
# The Docker Compose will inject this via the 'command'.
# requirepass YOUR_VERY_STRONG_REDIS_PASSWORD